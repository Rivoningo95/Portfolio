{"ast":null,"code":"import _regeneratorRuntime from \"/Users/da_m1_44/Portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/da_m1_44/Portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/da_m1_44/Portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/da_m1_44/Portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/da_m1_44/Portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/da_m1_44/Portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/da_m1_44/Portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nimport { Constants, ExternalInteractorBase } from \"../../../Core\";\nimport { getDistance, getLinkColor, getLinkRandomColor, isInArray } from \"../../../Utils\";\nexport var Grabber = /*#__PURE__*/function (_ExternalInteractorBa) {\n  _inherits(Grabber, _ExternalInteractorBa);\n  function Grabber(container) {\n    _classCallCheck(this, Grabber);\n    return _possibleConstructorReturn(this, _getPrototypeOf(Grabber).call(this, container));\n  }\n  _createClass(Grabber, [{\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      var container = this.container,\n        mouse = container.interactivity.mouse,\n        events = container.actualOptions.interactivity.events;\n      return events.onHover.enable && !!mouse.position && isInArray(\"grab\", events.onHover.mode);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {}\n  }, {\n    key: \"interact\",\n    value: function () {\n      var _interact = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _a, container, options, interactivity, mousePos, distance, query, _iterator, _step, particle, pos, pointDistance, grabLineOptions, lineOpacity, opacityLine, optColor, linksOptions, colorLine;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                container = this.container, options = container.actualOptions, interactivity = options.interactivity;\n                if (!(interactivity.events.onHover.enable && container.interactivity.status === Constants.mouseMoveEvent)) {\n                  _context.next = 32;\n                  break;\n                }\n                mousePos = container.interactivity.mouse.position;\n                if (mousePos) {\n                  _context.next = 5;\n                  break;\n                }\n                return _context.abrupt(\"return\");\n              case 5:\n                distance = container.retina.grabModeDistance, query = container.particles.quadTree.queryCircle(mousePos, distance);\n                _iterator = _createForOfIteratorHelper(query);\n                _context.prev = 7;\n                _iterator.s();\n              case 9:\n                if ((_step = _iterator.n()).done) {\n                  _context.next = 24;\n                  break;\n                }\n                particle = _step.value;\n                pos = particle.getPosition(), pointDistance = getDistance(pos, mousePos);\n                if (!(pointDistance <= distance)) {\n                  _context.next = 22;\n                  break;\n                }\n                grabLineOptions = interactivity.modes.grab.links, lineOpacity = grabLineOptions.opacity, opacityLine = lineOpacity - pointDistance * lineOpacity / distance;\n                if (!(opacityLine <= 0)) {\n                  _context.next = 16;\n                  break;\n                }\n                return _context.abrupt(\"continue\", 22);\n              case 16:\n                optColor = (_a = grabLineOptions.color) !== null && _a !== void 0 ? _a : particle.options.links.color;\n                if (!container.particles.grabLineColor) {\n                  linksOptions = options.interactivity.modes.grab.links;\n                  container.particles.grabLineColor = getLinkRandomColor(optColor, linksOptions.blink, linksOptions.consent);\n                }\n                colorLine = getLinkColor(particle, undefined, container.particles.grabLineColor);\n                if (colorLine) {\n                  _context.next = 21;\n                  break;\n                }\n                return _context.abrupt(\"return\");\n              case 21:\n                container.canvas.drawGrabLine(particle, colorLine, opacityLine, mousePos);\n              case 22:\n                _context.next = 9;\n                break;\n              case 24:\n                _context.next = 29;\n                break;\n              case 26:\n                _context.prev = 26;\n                _context.t0 = _context[\"catch\"](7);\n                _iterator.e(_context.t0);\n              case 29:\n                _context.prev = 29;\n                _iterator.f();\n                return _context.finish(29);\n              case 32:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[7, 26, 29, 32]]);\n      }));\n      function interact() {\n        return _interact.apply(this, arguments);\n      }\n      return interact;\n    }()\n  }]);\n  return Grabber;\n}(ExternalInteractorBase);","map":null,"metadata":{},"sourceType":"module"}