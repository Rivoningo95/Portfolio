{"ast":null,"code":"import _classCallCheck from \"/Users/da_m1_44/Portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/da_m1_44/Portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/da_m1_44/Portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/da_m1_44/Portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/da_m1_44/Portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { Range } from \"./Range\";\nimport { getDistance } from \"../../Utils\";\nexport var Circle = /*#__PURE__*/function (_Range) {\n  _inherits(Circle, _Range);\n  function Circle(x, y, radius) {\n    var _this;\n    _classCallCheck(this, Circle);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Circle).call(this, x, y));\n    _this.radius = radius;\n    return _this;\n  }\n  _createClass(Circle, [{\n    key: \"contains\",\n    value: function contains(point) {\n      return getDistance(point, this.position) <= this.radius;\n    }\n  }, {\n    key: \"intersects\",\n    value: function intersects(range) {\n      var rect = range;\n      var circle = range;\n      var pos1 = this.position;\n      var pos2 = range.position;\n      var xDist = Math.abs(pos2.x - pos1.x);\n      var yDist = Math.abs(pos2.y - pos1.y);\n      var r = this.radius;\n      if (circle.radius !== undefined) {\n        var rSum = r + circle.radius;\n        var dist = Math.sqrt(xDist * xDist + yDist + yDist);\n        return rSum > dist;\n      } else if (rect.size !== undefined) {\n        var w = rect.size.width;\n        var h = rect.size.height;\n        var edges = Math.pow(xDist - w, 2) + Math.pow(yDist - h, 2);\n        if (xDist > r + w || yDist > r + h) {\n          return false;\n        }\n        if (xDist <= w || yDist <= h) {\n          return true;\n        }\n        return edges <= r * r;\n      }\n      return false;\n    }\n  }]);\n  return Circle;\n}(Range);","map":null,"metadata":{},"sourceType":"module"}