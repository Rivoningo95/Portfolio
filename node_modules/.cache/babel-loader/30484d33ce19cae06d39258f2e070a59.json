{"ast":null,"code":"import _regeneratorRuntime from \"/Users/da_m1_44/Portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/da_m1_44/Portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/da_m1_44/Portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/da_m1_44/Portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/da_m1_44/Portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Particles_engine;\nimport { InteractionManager, ParticlesMover, Point, QuadTree, Rectangle } from \"./Utils\";\nimport { getRangeMax, getRangeMin, getRangeValue, randomInRange, setRangeValue } from \"../Utils\";\nimport { Particle } from \"./Particle\";\nimport { ParticlesOptions } from \"../Options/Classes/Particles/ParticlesOptions\";\nexport var Particles = /*#__PURE__*/function () {\n  function Particles(engine, container) {\n    _classCallCheck(this, Particles);\n    this.container = container;\n    _Particles_engine.set(this, void 0);\n    __classPrivateFieldSet(this, _Particles_engine, engine, \"f\");\n    this.nextId = 0;\n    this.array = [];\n    this.zArray = [];\n    this.mover = new ParticlesMover(container);\n    this.limit = 0;\n    this.needsSort = false;\n    this.lastZIndex = 0;\n    this.freqs = {\n      links: new Map(),\n      triangles: new Map()\n    };\n    this.interactionManager = new InteractionManager(__classPrivateFieldGet(this, _Particles_engine, \"f\"), container);\n    var canvasSize = this.container.canvas.size;\n    this.linksColors = new Map();\n    this.quadTree = new QuadTree(new Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, canvasSize.width * 3 / 2, canvasSize.height * 3 / 2), 4);\n    this.updaters = __classPrivateFieldGet(this, _Particles_engine, \"f\").plugins.getUpdaters(container, true);\n  }\n  _createClass(Particles, [{\n    key: \"init\",\n    value: function init() {\n      var _a;\n      var container = this.container;\n      var options = container.actualOptions;\n      this.lastZIndex = 0;\n      this.needsSort = false;\n      this.freqs.links = new Map();\n      this.freqs.triangles = new Map();\n      var handled = false;\n      this.updaters = __classPrivateFieldGet(this, _Particles_engine, \"f\").plugins.getUpdaters(container, true);\n      this.interactionManager.init();\n      var _iterator = _createForOfIteratorHelper(container.plugins),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n            plugin = _step$value[1];\n          if (plugin.particlesInitialization !== undefined) {\n            handled = plugin.particlesInitialization();\n          }\n          if (handled) {\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      this.addManualParticles();\n      if (!handled) {\n        for (var group in options.particles.groups) {\n          var groupOptions = options.particles.groups[group];\n          for (var i = this.count, j = 0; j < ((_a = groupOptions.number) === null || _a === void 0 ? void 0 : _a.value) && i < options.particles.number.value; i++, j++) {\n            this.addParticle(undefined, groupOptions, group);\n          }\n        }\n        for (var _i = this.count; _i < options.particles.number.value; _i++) {\n          this.addParticle();\n        }\n      }\n      container.pathGenerator.init(container);\n    }\n  }, {\n    key: \"redraw\",\n    value: function () {\n      var _redraw = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.clear();\n                this.init();\n                _context.next = 4;\n                return this.draw({\n                  value: 0,\n                  factor: 0\n                });\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function redraw() {\n        return _redraw.apply(this, arguments);\n      }\n      return redraw;\n    }()\n  }, {\n    key: \"removeAt\",\n    value: function removeAt(index) {\n      var quantity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var group = arguments.length > 2 ? arguments[2] : undefined;\n      var override = arguments.length > 3 ? arguments[3] : undefined;\n      if (!(index >= 0 && index <= this.count)) {\n        return;\n      }\n      var deleted = 0;\n      for (var i = index; deleted < quantity && i < this.count; i++) {\n        var particle = this.array[i];\n        if (!particle || particle.group !== group) {\n          continue;\n        }\n        particle.destroy(override);\n        this.array.splice(i--, 1);\n        var zIdx = this.zArray.indexOf(particle);\n        this.zArray.splice(zIdx, 1);\n        deleted++;\n      }\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(particle, group, override) {\n      this.removeAt(this.array.indexOf(particle), undefined, group, override);\n    }\n  }, {\n    key: \"update\",\n    value: function () {\n      var _update = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(delta) {\n        var container, particlesToDelete, _iterator2, _step2, _step2$value, plugin, _iterator3, _step3, _particle, resizeFactor, _iterator5, _step5, _step5$value, _plugin, _i2, _particlesToDelete, particle, _iterator4, _step4, _particle2, _iterator6, _step6, updater;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                container = this.container;\n                particlesToDelete = [];\n                container.pathGenerator.update();\n                _iterator2 = _createForOfIteratorHelper(container.plugins);\n                try {\n                  for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                    _step2$value = _slicedToArray(_step2.value, 2), plugin = _step2$value[1];\n                    if (plugin.update !== undefined) {\n                      plugin.update(delta);\n                    }\n                  }\n                } catch (err) {\n                  _iterator2.e(err);\n                } finally {\n                  _iterator2.f();\n                }\n                _iterator3 = _createForOfIteratorHelper(this.array);\n                _context2.prev = 6;\n                _iterator3.s();\n              case 8:\n                if ((_step3 = _iterator3.n()).done) {\n                  _context2.next = 39;\n                  break;\n                }\n                _particle = _step3.value;\n                resizeFactor = container.canvas.resizeFactor;\n                if (resizeFactor && !_particle.ignoresResizeRatio) {\n                  _particle.position.x *= resizeFactor.width;\n                  _particle.position.y *= resizeFactor.height;\n                }\n                _particle.ignoresResizeRatio = false;\n                _particle.bubble.inRange = false;\n                _iterator5 = _createForOfIteratorHelper(this.container.plugins);\n                _context2.prev = 15;\n                _iterator5.s();\n              case 17:\n                if ((_step5 = _iterator5.n()).done) {\n                  _context2.next = 24;\n                  break;\n                }\n                _step5$value = _slicedToArray(_step5.value, 2), _plugin = _step5$value[1];\n                if (!_particle.destroyed) {\n                  _context2.next = 21;\n                  break;\n                }\n                return _context2.abrupt(\"break\", 24);\n              case 21:\n                if (_plugin.particleUpdate) {\n                  _plugin.particleUpdate(_particle, delta);\n                }\n              case 22:\n                _context2.next = 17;\n                break;\n              case 24:\n                _context2.next = 29;\n                break;\n              case 26:\n                _context2.prev = 26;\n                _context2.t0 = _context2[\"catch\"](15);\n                _iterator5.e(_context2.t0);\n              case 29:\n                _context2.prev = 29;\n                _iterator5.f();\n                return _context2.finish(29);\n              case 32:\n                this.mover.move(_particle, delta);\n                if (!_particle.destroyed) {\n                  _context2.next = 36;\n                  break;\n                }\n                particlesToDelete.push(_particle);\n                return _context2.abrupt(\"continue\", 37);\n              case 36:\n                this.quadTree.insert(new Point(_particle.getPosition(), _particle));\n              case 37:\n                _context2.next = 8;\n                break;\n              case 39:\n                _context2.next = 44;\n                break;\n              case 41:\n                _context2.prev = 41;\n                _context2.t1 = _context2[\"catch\"](6);\n                _iterator3.e(_context2.t1);\n              case 44:\n                _context2.prev = 44;\n                _iterator3.f();\n                return _context2.finish(44);\n              case 47:\n                for (_i2 = 0, _particlesToDelete = particlesToDelete; _i2 < _particlesToDelete.length; _i2++) {\n                  particle = _particlesToDelete[_i2];\n                  this.remove(particle);\n                }\n                _context2.next = 50;\n                return this.interactionManager.externalInteract(delta);\n              case 50:\n                _iterator4 = _createForOfIteratorHelper(container.particles.array);\n                _context2.prev = 51;\n                _iterator4.s();\n              case 53:\n                if ((_step4 = _iterator4.n()).done) {\n                  _context2.next = 62;\n                  break;\n                }\n                _particle2 = _step4.value;\n                _iterator6 = _createForOfIteratorHelper(this.updaters);\n                try {\n                  for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n                    updater = _step6.value;\n                    updater.update(_particle2, delta);\n                  }\n                } catch (err) {\n                  _iterator6.e(err);\n                } finally {\n                  _iterator6.f();\n                }\n                if (!(!_particle2.destroyed && !_particle2.spawning)) {\n                  _context2.next = 60;\n                  break;\n                }\n                _context2.next = 60;\n                return this.interactionManager.particlesInteract(_particle2, delta);\n              case 60:\n                _context2.next = 53;\n                break;\n              case 62:\n                _context2.next = 67;\n                break;\n              case 64:\n                _context2.prev = 64;\n                _context2.t2 = _context2[\"catch\"](51);\n                _iterator4.e(_context2.t2);\n              case 67:\n                _context2.prev = 67;\n                _iterator4.f();\n                return _context2.finish(67);\n              case 70:\n                delete container.canvas.resizeFactor;\n              case 71:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[6, 41, 44, 47], [15, 26, 29, 32], [51, 64, 67, 70]]);\n      }));\n      function update(_x) {\n        return _update.apply(this, arguments);\n      }\n      return update;\n    }()\n  }, {\n    key: \"draw\",\n    value: function () {\n      var _draw = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(delta) {\n        var container, canvasSize, _iterator7, _step7, _step7$value, plugin, _iterator8, _step8, p;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                container = this.container;\n                container.canvas.clear();\n                canvasSize = this.container.canvas.size;\n                this.quadTree = new QuadTree(new Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, canvasSize.width * 3 / 2, canvasSize.height * 3 / 2), 4);\n                _context3.next = 6;\n                return this.update(delta);\n              case 6:\n                if (this.needsSort) {\n                  this.zArray.sort(function (a, b) {\n                    return b.position.z - a.position.z || a.id - b.id;\n                  });\n                  this.lastZIndex = this.zArray[this.zArray.length - 1].position.z;\n                  this.needsSort = false;\n                }\n                _iterator7 = _createForOfIteratorHelper(container.plugins);\n                try {\n                  for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n                    _step7$value = _slicedToArray(_step7.value, 2), plugin = _step7$value[1];\n                    container.canvas.drawPlugin(plugin, delta);\n                  }\n                } catch (err) {\n                  _iterator7.e(err);\n                } finally {\n                  _iterator7.f();\n                }\n                _iterator8 = _createForOfIteratorHelper(this.zArray);\n                try {\n                  for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n                    p = _step8.value;\n                    p.draw(delta);\n                  }\n                } catch (err) {\n                  _iterator8.e(err);\n                } finally {\n                  _iterator8.f();\n                }\n              case 11:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function draw(_x2) {\n        return _draw.apply(this, arguments);\n      }\n      return draw;\n    }()\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.array = [];\n      this.zArray = [];\n    }\n  }, {\n    key: \"push\",\n    value: function push(nb, mouse, overrideOptions, group) {\n      this.pushing = true;\n      for (var i = 0; i < nb; i++) {\n        this.addParticle(mouse === null || mouse === void 0 ? void 0 : mouse.position, overrideOptions, group);\n      }\n      this.pushing = false;\n    }\n  }, {\n    key: \"addParticle\",\n    value: function addParticle(position, overrideOptions, group) {\n      var container = this.container,\n        options = container.actualOptions,\n        limit = options.particles.number.limit * container.density;\n      if (limit > 0) {\n        var countToRemove = this.count + 1 - limit;\n        if (countToRemove > 0) {\n          this.removeQuantity(countToRemove);\n        }\n      }\n      return this.pushParticle(position, overrideOptions, group);\n    }\n  }, {\n    key: \"addSplitParticle\",\n    value: function addSplitParticle(parent) {\n      var splitOptions = parent.options.destroy.split,\n        options = new ParticlesOptions();\n      options.load(parent.options);\n      var factor = getRangeValue(splitOptions.factor.value);\n      options.color.load({\n        value: {\n          hsl: parent.getFillColor()\n        }\n      });\n      if (typeof options.size.value === \"number\") {\n        options.size.value /= factor;\n      } else {\n        options.size.value.min /= factor;\n        options.size.value.max /= factor;\n      }\n      options.load(splitOptions.particles);\n      var offset = splitOptions.sizeOffset ? setRangeValue(-parent.size.value, parent.size.value) : 0;\n      var position = {\n        x: parent.position.x + randomInRange(offset),\n        y: parent.position.y + randomInRange(offset)\n      };\n      return this.pushParticle(position, options, parent.group, function (particle) {\n        if (particle.size.value < 0.5) {\n          return false;\n        }\n        particle.velocity.length = randomInRange(setRangeValue(parent.velocity.length, particle.velocity.length));\n        particle.splitCount = parent.splitCount + 1;\n        particle.unbreakable = true;\n        setTimeout(function () {\n          particle.unbreakable = false;\n        }, 500);\n        return true;\n      });\n    }\n  }, {\n    key: \"removeQuantity\",\n    value: function removeQuantity(quantity, group) {\n      this.removeAt(0, quantity, group);\n    }\n  }, {\n    key: \"getLinkFrequency\",\n    value: function getLinkFrequency(p1, p2) {\n      var range = setRangeValue(p1.id, p2.id),\n        key = \"\".concat(getRangeMin(range), \"_\").concat(getRangeMax(range));\n      var res = this.freqs.links.get(key);\n      if (res === undefined) {\n        res = Math.random();\n        this.freqs.links.set(key, res);\n      }\n      return res;\n    }\n  }, {\n    key: \"getTriangleFrequency\",\n    value: function getTriangleFrequency(p1, p2, p3) {\n      var _ref = [p1.id, p2.id, p3.id],\n        id1 = _ref[0],\n        id2 = _ref[1],\n        id3 = _ref[2];\n      if (id1 > id2) {\n        var _ref2 = [id1, id2];\n        id2 = _ref2[0];\n        id1 = _ref2[1];\n      }\n      if (id2 > id3) {\n        var _ref3 = [id2, id3];\n        id3 = _ref3[0];\n        id2 = _ref3[1];\n      }\n      if (id1 > id3) {\n        var _ref4 = [id1, id3];\n        id3 = _ref4[0];\n        id1 = _ref4[1];\n      }\n      var key = \"\".concat(id1, \"_\").concat(id2, \"_\").concat(id3);\n      var res = this.freqs.triangles.get(key);\n      if (res === undefined) {\n        res = Math.random();\n        this.freqs.triangles.set(key, res);\n      }\n      return res;\n    }\n  }, {\n    key: \"addManualParticles\",\n    value: function addManualParticles() {\n      var container = this.container,\n        options = container.actualOptions;\n      var _iterator9 = _createForOfIteratorHelper(options.manualParticles),\n        _step9;\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var particle = _step9.value;\n          var pos = particle.position ? {\n            x: particle.position.x * container.canvas.size.width / 100,\n            y: particle.position.y * container.canvas.size.height / 100\n          } : undefined;\n          this.addParticle(pos, particle.options);\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n    }\n  }, {\n    key: \"setDensity\",\n    value: function setDensity() {\n      var options = this.container.actualOptions;\n      for (var group in options.particles.groups) {\n        this.applyDensity(options.particles.groups[group], 0, group);\n      }\n      this.applyDensity(options.particles, options.manualParticles.length);\n    }\n  }, {\n    key: \"applyDensity\",\n    value: function applyDensity(options, manualCount, group) {\n      var _a;\n      if (!((_a = options.number.density) === null || _a === void 0 ? void 0 : _a.enable)) {\n        return;\n      }\n      var numberOptions = options.number;\n      var densityFactor = this.initDensityFactor(numberOptions.density);\n      var optParticlesNumber = numberOptions.value;\n      var optParticlesLimit = numberOptions.limit > 0 ? numberOptions.limit : optParticlesNumber;\n      var particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor + manualCount;\n      var particlesCount = Math.min(this.count, this.array.filter(function (t) {\n        return t.group === group;\n      }).length);\n      this.limit = numberOptions.limit * densityFactor;\n      if (particlesCount < particlesNumber) {\n        this.push(Math.abs(particlesNumber - particlesCount), undefined, options, group);\n      } else if (particlesCount > particlesNumber) {\n        this.removeQuantity(particlesCount - particlesNumber, group);\n      }\n    }\n  }, {\n    key: \"initDensityFactor\",\n    value: function initDensityFactor(densityOptions) {\n      var container = this.container;\n      if (!container.canvas.element || !densityOptions.enable) {\n        return 1;\n      }\n      var canvas = container.canvas.element,\n        pxRatio = container.retina.pixelRatio;\n      return canvas.width * canvas.height / (densityOptions.factor * Math.pow(pxRatio, 2) * densityOptions.area);\n    }\n  }, {\n    key: \"pushParticle\",\n    value: function pushParticle(position, overrideOptions, group, initializer) {\n      try {\n        var particle = new Particle(__classPrivateFieldGet(this, _Particles_engine, \"f\"), this.nextId, this.container, position, overrideOptions, group);\n        var canAdd = true;\n        if (initializer) {\n          canAdd = initializer(particle);\n        }\n        if (!canAdd) {\n          return;\n        }\n        this.array.push(particle);\n        this.zArray.push(particle);\n        this.nextId++;\n        return particle;\n      } catch (e) {\n        console.warn(\"error adding particle: \".concat(e));\n        return;\n      }\n    }\n  }, {\n    key: \"count\",\n    get: function get() {\n      return this.array.length;\n    }\n  }]);\n  return Particles;\n}();\n_Particles_engine = new WeakMap();","map":null,"metadata":{},"sourceType":"module"}