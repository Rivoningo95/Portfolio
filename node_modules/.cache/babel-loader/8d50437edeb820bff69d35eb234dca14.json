{"ast":null,"code":"import _classCallCheck from \"/Users/da_m1_44/Portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/da_m1_44/Portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { clamp, getDistance, getDistances, getRangeMax, getRangeValue, isInArray, isSsr } from \"../../Utils\";\nfunction applyDistance(particle) {\n  var initialPosition = particle.initialPosition;\n  var _getDistances = getDistances(initialPosition, particle.position),\n    dx = _getDistances.dx,\n    dy = _getDistances.dy;\n  var dxFixed = Math.abs(dx),\n    dyFixed = Math.abs(dy);\n  var hDistance = particle.retina.maxDistance.horizontal;\n  var vDistance = particle.retina.maxDistance.vertical;\n  if (!hDistance && !vDistance) {\n    return;\n  }\n  if ((hDistance && dxFixed >= hDistance || vDistance && dyFixed >= vDistance) && !particle.misplaced) {\n    particle.misplaced = !!hDistance && dxFixed > hDistance || !!vDistance && dyFixed > vDistance;\n    if (hDistance) {\n      particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n    }\n    if (vDistance) {\n      particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n    }\n  } else if ((!hDistance || dxFixed < hDistance) && (!vDistance || dyFixed < vDistance) && particle.misplaced) {\n    particle.misplaced = false;\n  } else if (particle.misplaced) {\n    var pos = particle.position,\n      vel = particle.velocity;\n    if (hDistance && (pos.x < initialPosition.x && vel.x < 0 || pos.x > initialPosition.x && vel.x > 0)) {\n      vel.x *= -Math.random();\n    }\n    if (vDistance && (pos.y < initialPosition.y && vel.y < 0 || pos.y > initialPosition.y && vel.y > 0)) {\n      vel.y *= -Math.random();\n    }\n  }\n}\nexport var ParticlesMover = /*#__PURE__*/function () {\n  function ParticlesMover(container) {\n    _classCallCheck(this, ParticlesMover);\n    this.container = container;\n  }\n  _createClass(ParticlesMover, [{\n    key: \"move\",\n    value: function move(particle, delta) {\n      if (particle.destroyed) {\n        return;\n      }\n      this.moveParticle(particle, delta);\n      this.moveParallax(particle);\n    }\n  }, {\n    key: \"moveParticle\",\n    value: function moveParticle(particle, delta) {\n      var _a, _b, _c;\n      var _d, _e;\n      var particleOptions = particle.options;\n      var moveOptions = particleOptions.move;\n      if (!moveOptions.enable) {\n        return;\n      }\n      var container = this.container,\n        slowFactor = this.getProximitySpeedFactor(particle),\n        baseSpeed = ((_a = (_d = particle.retina).moveSpeed) !== null && _a !== void 0 ? _a : _d.moveSpeed = getRangeValue(moveOptions.speed) * container.retina.pixelRatio) * container.retina.reduceFactor,\n        moveDrift = (_b = (_e = particle.retina).moveDrift) !== null && _b !== void 0 ? _b : _e.moveDrift = getRangeValue(particle.options.move.drift) * container.retina.pixelRatio,\n        maxSize = getRangeMax(particleOptions.size.value) * container.retina.pixelRatio,\n        sizeFactor = moveOptions.size ? particle.getRadius() / maxSize : 1,\n        diffFactor = 2,\n        speedFactor = sizeFactor * slowFactor * (delta.factor || 1) / diffFactor,\n        moveSpeed = baseSpeed * speedFactor;\n      this.applyPath(particle, delta);\n      var gravityOptions = particle.gravity;\n      var gravityFactor = gravityOptions.enable && gravityOptions.inverse ? -1 : 1;\n      if (gravityOptions.enable && moveSpeed) {\n        particle.velocity.y += gravityFactor * (gravityOptions.acceleration * delta.factor) / (60 * moveSpeed);\n      }\n      if (moveDrift && moveSpeed) {\n        particle.velocity.x += moveDrift * delta.factor / (60 * moveSpeed);\n      }\n      var decay = particle.moveDecay;\n      if (decay != 1) {\n        particle.velocity.multTo(decay);\n      }\n      var velocity = particle.velocity.mult(moveSpeed);\n      var maxSpeed = (_c = particle.retina.maxSpeed) !== null && _c !== void 0 ? _c : container.retina.maxSpeed;\n      if (gravityOptions.enable && maxSpeed > 0 && (!gravityOptions.inverse && velocity.y >= 0 && velocity.y >= maxSpeed || gravityOptions.inverse && velocity.y <= 0 && velocity.y <= -maxSpeed)) {\n        velocity.y = gravityFactor * maxSpeed;\n        if (moveSpeed) {\n          particle.velocity.y = velocity.y / moveSpeed;\n        }\n      }\n      var zIndexOptions = particle.options.zIndex,\n        zVelocityFactor = Math.pow(1 - particle.zIndexFactor, zIndexOptions.velocityRate);\n      if (moveOptions.spin.enable) {\n        this.spin(particle, moveSpeed);\n      } else {\n        if (zVelocityFactor != 1) {\n          velocity.multTo(zVelocityFactor);\n        }\n        particle.position.addTo(velocity);\n        if (moveOptions.vibrate) {\n          particle.position.x += Math.sin(particle.position.x * Math.cos(particle.position.y));\n          particle.position.y += Math.cos(particle.position.y * Math.sin(particle.position.x));\n        }\n      }\n      applyDistance(particle);\n    }\n  }, {\n    key: \"spin\",\n    value: function spin(particle, moveSpeed) {\n      var container = this.container;\n      if (!particle.spin) {\n        return;\n      }\n      var updateFunc = {\n        x: particle.spin.direction === \"clockwise\" ? Math.cos : Math.sin,\n        y: particle.spin.direction === \"clockwise\" ? Math.sin : Math.cos\n      };\n      particle.position.x = particle.spin.center.x + particle.spin.radius * updateFunc.x(particle.spin.angle);\n      particle.position.y = particle.spin.center.y + particle.spin.radius * updateFunc.y(particle.spin.angle);\n      particle.spin.radius += particle.spin.acceleration;\n      var maxCanvasSize = Math.max(container.canvas.size.width, container.canvas.size.height);\n      if (particle.spin.radius > maxCanvasSize / 2) {\n        particle.spin.radius = maxCanvasSize / 2;\n        particle.spin.acceleration *= -1;\n      } else if (particle.spin.radius < 0) {\n        particle.spin.radius = 0;\n        particle.spin.acceleration *= -1;\n      }\n      particle.spin.angle += moveSpeed / 100 * (1 - particle.spin.radius / maxCanvasSize);\n    }\n  }, {\n    key: \"applyPath\",\n    value: function applyPath(particle, delta) {\n      var particlesOptions = particle.options;\n      var pathOptions = particlesOptions.move.path;\n      var pathEnabled = pathOptions.enable;\n      if (!pathEnabled) {\n        return;\n      }\n      var container = this.container;\n      if (particle.lastPathTime <= particle.pathDelay) {\n        particle.lastPathTime += delta.value;\n        return;\n      }\n      var path = container.pathGenerator.generate(particle);\n      particle.velocity.addTo(path);\n      if (pathOptions.clamp) {\n        particle.velocity.x = clamp(particle.velocity.x, -1, 1);\n        particle.velocity.y = clamp(particle.velocity.y, -1, 1);\n      }\n      particle.lastPathTime -= particle.pathDelay;\n    }\n  }, {\n    key: \"moveParallax\",\n    value: function moveParallax(particle) {\n      var container = this.container;\n      var options = container.actualOptions;\n      if (isSsr() || !options.interactivity.events.onHover.parallax.enable) {\n        return;\n      }\n      var parallaxForce = options.interactivity.events.onHover.parallax.force;\n      var mousePos = container.interactivity.mouse.position;\n      if (!mousePos) {\n        return;\n      }\n      var canvasCenter = {\n        x: container.canvas.size.width / 2,\n        y: container.canvas.size.height / 2\n      };\n      var parallaxSmooth = options.interactivity.events.onHover.parallax.smooth;\n      var factor = particle.getRadius() / parallaxForce;\n      var tmp = {\n        x: (mousePos.x - canvasCenter.x) * factor,\n        y: (mousePos.y - canvasCenter.y) * factor\n      };\n      particle.offset.x += (tmp.x - particle.offset.x) / parallaxSmooth;\n      particle.offset.y += (tmp.y - particle.offset.y) / parallaxSmooth;\n    }\n  }, {\n    key: \"getProximitySpeedFactor\",\n    value: function getProximitySpeedFactor(particle) {\n      var container = this.container;\n      var options = container.actualOptions;\n      var active = isInArray(\"slow\", options.interactivity.events.onHover.mode);\n      if (!active) {\n        return 1;\n      }\n      var mousePos = this.container.interactivity.mouse.position;\n      if (!mousePos) {\n        return 1;\n      }\n      var particlePos = particle.getPosition();\n      var dist = getDistance(mousePos, particlePos);\n      var radius = container.retina.slowModeRadius;\n      if (dist > radius) {\n        return 1;\n      }\n      var proximityFactor = dist / radius || 0;\n      var slowFactor = options.interactivity.modes.slow.factor;\n      return proximityFactor / slowFactor;\n    }\n  }]);\n  return ParticlesMover;\n}();","map":null,"metadata":{},"sourceType":"module"}